<link rel="stylesheet" href="/assets/objectView.css">
<script src="/assets/jquery.jsPlumb-1.3.15-all-min.js" type="text/javascript"></script>
<script src="/assets/jsPlumbInitializer.js" type="text/javascript"></script>

<div style="position:absolute">
  <div id="workspace">
    <div class="component window" id="object-dummy" style="visibility: hidden;">
      <div style="white-space: nowrap;"><b class="icon-refresh icon-spin"></b> Loading...</div>
    </div>
  </div>
</div>

<script type="text/javascript">
  graphDb = {
    references: {},
    superclasses: {}};

  function graphDbAddReference(obj, references) {
    graphDb.references[obj] = references;
  }
  
  function drawGraphForObject(id) {
    // Draw references
    for (var obj1 in graphDb.references) {
      for (var refIndex in graphDb.references[obj1]) {
        var ref = graphDb.references[obj1][refIndex];
        var obj2 = ref[2];
        
        if (obj1 == id || obj2 == id) {
          var objectsDrawn = $("#object-" + obj1).length == 1 && $("#object-" + obj2).length == 1

          if (objectsDrawn) {
            parameters = $.extend(true, {}, jspReferenceConnection);
            parameters.target = "object-" + obj2;
            parameters.source = "object-" + obj1;
            parameters.overlays[1][1].label = generateIvNameBox(ref[1], ref[0]);
            jsPlumb.connect(parameters);
          }
        }
      }
    }
  }

  function generateIvNameBox(data, type) {
    var content = data;

    if (type === "hash_key") {
      content = "obj[...] = <span class=\"insert-inline-object-view\" style=\"white-space: nowrap;\" data-id=\"" + data + "\"></span>";
    }
    else if (type === "hash_value") {
      content = "obj[<span class=\"insert-inline-object-view\" style=\"white-space: nowrap;\" data-id=\"" + data + "\"></span>] = ...";
    }
    else if (type === "array_element") {
      content = "obj[" + data + "] = ...";  
    }
     
    return "<span class=\"component object-ivname-box\" style=\"white-space: nowrap;\">" + content + "</span>";
  }

  function generateObjectWindow(id, left, top) {
    var objectWindow = $("#object-dummy").clone();
    objectWindow.attr("id", "object-" + id);
    objectWindow.css({"left": left, "top": top});
     
    $("#workspace").append(objectWindow);
    jsPlumbPrepareWindow(objectWindow);
    
    objectWindow.css({"visibility": "visible"});
    objectWindow.addClass("window-mouse-out");

    objectWindow.mouseenter(function (event) {
      $(event.target).closest(".window").removeClass("window-mouse-out");
    });

    objectWindow.mouseleave(function (event) {
      $(event.target).closest(".window").addClass("window-mouse-out");
    });
  }

  function loadObject(id) {
    $.post("/ObjectExplorer/object.html", {"id": id}, function(response) {
      $("#object-" + id).html(response);

      $.post("/ObjectExplorer/object.json", {"id": id}, function(response) {
        // Save graph structure in graph_db
        graphDbAddReference(response.id, response.references);
        drawGraphForObject(id);
      });

      $(".draggable-new-object").draggable({
        create: function(event, ui) {
        },

        cursorAt: {left: 0, top: 0}, 

        start: function(event, ui) {
          $(event.target).find(".object-iv-name").hide();
          $(event.target).find(".object-drag-dummy").show();
        },

        stop: function(event, ui) {
          var position = $(event.target).offset();
          var id = $(event.target).data("id");

          if ($("#object-" + id).length === 0) {
            var left = position.left - $(event.target).width() / 2;
            var top = position.top - $(event.target).height() / 2 - $(".index").outerHeight();
         
            generateObjectWindow(id, left, top);
            loadObject(id);
          } 
         
          $(event.target).css({"top": 0});
          $(event.target).css({"left": 0});

          $(event.target).find(".object-iv-name").show();
          $(event.target).find(".object-drag-dummy").hide();
        }
      });

    });
  }

  $(document).ready(function() {
    $("#object-dummy").removeClass("ui-draggable");
    generateObjectWindow(<%= @id %>, 20, 20);
    loadObject(<%= @id %>);
  });
</script>
